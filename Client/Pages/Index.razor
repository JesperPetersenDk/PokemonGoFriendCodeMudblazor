@page "/"

<PageTitle>Index</PageTitle>

<MudGrid>
    <MudItem xs="8" sm="8">
        @if(!succes)
        {
            <p>Enter the QR code for pokemon GO correctly!</p>
        }
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@succes">
                <MudTextField @bind-Value="FriendCodeText" Label="Friend code" Variant="Variant.Outlined"></MudTextField>
                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="GivfriendQRCode" Disabled="@(!succes)" Class="ml-auto">Give mig QR Code.</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="RandomQRCode" Disabled="@(!succes)" Class="ml-auto">Random QR Code.</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="4" sm="4">
        @if(ShowQR)
        {
            <a href="@QRUrl" target="_blank">Åben QR</a>
            <img src="@QRUrl" />
        }
    </MudItem>
    <b>Update på siden: Oprettelse af siden og Tilføj Random muligheden</b>
</MudGrid>

@code {
    MudForm form;
    bool succes;
    public string FriendCodeText { get; set; } = string.Empty;
    public bool ShowQR { get; set; } = false;
    public string QRUrl { get; set; } = string.Empty;

    async Task RandomQRCode()
    {
        List<string> list = new List<string> { "1412 8254 1514", "5199 8376 6173", "6629 7230 6030", "1968 8192 4356", "0866 2207 1606", "9646 6573 4701", "6387 3529 7871", "6872 1728 2605", "5811 4209 2486", "5337 4134 2678", "9494 2745 5303", "1198 5537 9042", "3878 7126 0859", "7810 9762 3782", "7050 4262 1418", "9619 8621 8535", "3491 9542 5304", "8240 3376 2746", "3399 2576 6729", "7810 4772 4894", "2176 0225 8130", "0980 4203 1381", "9179 2805 4446", "1400 0567 9959", "4348 0164 9184", "7785 3385 9753", "3358 0032 9498", "2715 3894 7305", "5254 8950 2334", "3478 6987 8668", "8562 5524 9676", "9379 1452 6794", "3580 3788 8635", "3834 4940 8812", "5309 8394 9410", "0323 2849 5661", "5809 8465 0823", "4980 6757 2834", "4325 3312 2906", "6746 9403 0811", "0483 4609 3005", "7686 7454 4382", "3225 0980 6551", "4227 7068 2887", "1693 5753 0647", "8869 6554 8483", "4660 9387 5998", "0516 4724 0778", "8918 9233 5141", "7427 1050 3288", "8197 8199 2105", "6893 2581 9596", "6834 3282 2973", "0072 9702 4019", "6558 7750 4353", "4642 6283 3016", "6437 3263 2164", "6901 9580 1768", "2182 0873 0777", "5635 5800 1421", "2192 1684 1452", "2375 8933 3032", "4160 1855 2565", "7635 5663 3233", "8038 0368 6896", "7138 0951 0713", "5406 8001 7040", "0796 4289 3667", "0525 3275 6031", "0101 2381 3294", "1396 5044 1942", "8294 8755 6578", "6735 2072 8210", "9548 9082 1252", "3360 5378 9159", "5069 4931 4923", "8044 5618 7195", "8236 0528 0995", "5927 0067 5719", "8243 8317 8590", "7999 7807 1749", "8109 1881 2556", "5709 4272 8818", "3492 2311 5455", "8039 4262 8592", "0040 8070 2215", "3376 1232 9953", "4186 9196 9202", "1323 2098 8061", "8580 0869 3930", "1567 3938 9928", "2151 5413 7990", "6820 3711 2843", "9692 3276 0271", "8392 6499 9374", "0290 7618 0782", "8854 4195 3869", "4581 8117 6967", "8004 2718 2842", "1512 3905 2409", "0726 8005 1470", "4361 1525 9284", "3526 1268 3324", "8755 0904 3276", "1408 4709 8571", "6223 3479 8288", "7675 8473 8294", "0885 1200 5636", "6735 7820 2620", "5015 6749 9531", "8503 8911 0288", "2362 6667 7628", "4824 4646 1190", "4640 0513 2478", "6593 4253 9971", "5635 8477 5785", "816014562110", "4539 1974 1757", "2183 1043 6955", "9590 8953 3039", "7238 3187 4639", "6069 0295 3131", "1680 7414 7368", "5867 3542 5967", "4953 8141 0614", "7885 0114 4075", "8425 6741 1369", "6185 6298 7292", "6351 6592 1933", "2033 2412 2062", "6880 7608 6254", "1207 1556 6910", "8552 2276 2154", "3349 8024 5872", "5847 1096 3744", "6600 3511 1070", "1671 9739 4864", "6222 4668 4291", "7013 6645 5563", "0783 8633 7027", "0438 3150 7989", "4658 1341 6206", "1870 6863 7066", "2572 7658 3909", "8632 6638 8397", "2368 9249 4998", "0622 4879 9644", "0987 6608 4575", "7463 7615 6433", "2113 6151 1904", "5594 6154 2696", "6526 4855 0191", "2475 3466 0281", "6835 4771 1541", "9672 0762 5251", "9433 6015 6496", "7335 5281 3920", "4825 6130 5798", "1659 3442 3935", "3496 4298 2855", "4076 4001 6218", "3287 2875 3474", "0806 6177 3243", "8403 6063 0161", "8952 1973 5374", "0462 6957 5714", "8314 9281 7860", "1701 3363 3535", "4440 7557 8159", "2332 2574 9078", "5716 7560 2280", "8137 7913 0093", "9634 2982 3527", "0215 4274 9615", "8350 3926 4941", "7406 6576 0705", "9558 8190 4159", "2477 6110 4612 ", "3098 8459 8483", "8506 9060 1657", "8873 0438 4355", "5297 0785 9072", "7434 6437 9594", "8238 3136 9555", "3611 0032 8879", "3471 5832 9654", "9749 9459 3701", "4891 3039 7878", " 8024 8728 1621", "8860 2248 8471", "1546 1455 0934", "7920 6509 6320", "1538 2376 3486", "8296 2345 6075", "2209 7718 7743", "6056 5131 7822", "2343 6857 2902", "8801 0862 2164", "8161 1876 6951", "5313 6376 0960", "7543 4342 5325", "8707 5301 4516", "0006 0693 9805", "0949 5976 9988", "8947 8251 9373", "2064 4951 1194", "1558 3734 6570", "1896 6906 6903", "5668 9725 8226", "3796 9050 2540", "0638 9303 2755", "6897 8105 4491", "6318 4594 8260", "4736 4854 4182", "5490 9859 9232", "4969 5564 9481", "9150 0087 7443", "7820 2445 7242", "0903 6544 7340", "4077 2819 1714", "9059 9384 7887", "4969 5564 9481", "1079 8996 3006", "0169 1090 2014", "7961 7719 9276", "7143 9097 2204", "0586 2278 4642", "9984 1798 3258", "4965 8593 9151", "0783 6913 4188", "6707 3061 7453", "6651 6914 7621", "0496 0759 1657", "8051 5012 8746", "0809 6680 8963", "2295 8100 5992", "0866 3274 1334", "9329 3435 3349", "7456 0374 7605", "4839 8157 2288", "4471 3649 6643", "0124 1754 8576", "5197 0140 6312", "9625 6522 7850", "7057 7987 5580", "7985 0892 6818", "6446 3354 9116", "8663 1833 7777", "2849 8343 5108", "7243 7175 1703", "9181 4710 4922" };
        FriendCodeText = list.OrderBy(r => Guid.NewGuid()).ToList().First().Trim().Replace(" ", "");
        using (var client = new HttpClient())
        {
            var url = $"https://api.qrserver.com/v1/create-qr-code/?data={FriendCodeText}&size=350x350";
            var response = await client.GetAsync($"{url}");
            var resultNewUrl = response.RequestMessage.RequestUri.OriginalString;
            if (response.IsSuccessStatusCode)
            {
                ShowQR = true;
                QRUrl = url;
            }
        }
    }

    async Task GivfriendQRCode()
    {
        if(string.IsNullOrEmpty(FriendCodeText))
        {
            //Error
            succes = false;
        }
        else
        {
            //succes
            FriendCodeText = FriendCodeText.Trim().Replace(" ", "");

            using(var client = new HttpClient())
            {
                var url = $"https://api.qrserver.com/v1/create-qr-code/?data={FriendCodeText}&size=350x350";
                var response = await client.GetAsync($"{url}");
                var resultNewUrl = response.RequestMessage.RequestUri.OriginalString;
                if(response.IsSuccessStatusCode)
                {
                    ShowQR = true;
                    QRUrl = url;
                }
            }
        }
    }
}